Problem:
HackerLand Enterprise is adopting a new viral advertising strategy. When they launch a new product, they advertise it to exactly 5 people on social media. 
On the first day, half of those 5 people (i.e.,float(5/2)=2) like the advertisement and each shares it with 3 of their friends. At the beginning of the second day,3 * 2 = 6 people receive 
the advertisement. Each day,(float (reciients/2)) of the recipients like the advertisement and will share it with 3 friends on the following day. 
Assuming nobody receives the advertisement twice, determine how many people have liked the ad by the end of a given day, beginning with launch day as day 1.
Example:
n = 5
Day Shared Liked Cumulative
1      5     2       2
2      6     3       5
3      9     4       9
4     12     6      15
5     18     9      24

Solution:

import os

# Complete the 'viralAdvertising' function below.
# The function is expected to return an INTEGER.
# The function accepts INTEGER n as parameter.

def viralAdvertising(n):
    # Write your code here
    shared = 5
    result = 0
    for x in range(n):
        liked = shared // 2
        shared = liked * 3
        result += liked
    return result 
                
if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')
    n = int(input().strip())
    result = viralAdvertising(n)
    fptr.write(str(result) + '\n')
    fptr.close()

----------------------------------------------------------------------------------------------------------------------------------------------
Problem:
An integer "d" is a divisor of an integer "n" if the remainder of "n%d=0". Given an integer, for each digit that makes up the integer determine whether it is a divisor. 
Count the number of divisors occurring within the integer.
Example
n=124
Check whether 1,2,4 , and are divisors of 124. All 3 numbers divide evenly into 124 so return 3.     

Solution:
import os
# Complete the 'findDigits' function below.
# The function is expected to return an INTEGER.
# The function accepts INTEGER n as parameter.

def findDigits(n):
    # Write your code here
    counter = 0
    for index , digit in enumerate(str(n),start=1):
        digit = int(digit)
        if digit != 0:
            if n % digit == 0:
                counter += 1
    return counter

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')
    t = int(input().strip())
    for t_itr in range(t):
        n = int(input().strip())
        result = findDigits(n)
        fptr.write(str(result) + '\n')
    fptr.close()

